require("dotenv").config();
const User = require("../models/User"); // Load the user model

const passport = require('passport')
const GithubStrategy = require('passport-github').Strategy;
const moment = require("moment");

const cloudinary = require('./cloudinaryConfig') // Config object of cloudinary

module.exports = function(passport){
    passport.use(new GithubStrategy({
        clientID: process.env.GITHUB_CLIENT_ID,
        clientSecret: process.env.GITHUB_CLIENT_SECRET,
        callbackURL: "/auth/github/callback"
    },
    (accessToken, refreshToken, profile, done) =>  {
        cloudinary.uploader.upload(profile.photos[0].value, { tags: 'basic_sample', folder:'/denoshop/userProfileImage/github',}, function (err, image) {
            // Upload image to cloudinary + get the URL of processed image
            console.log();
            console.log("** File Upload");
            if (err) { console.warn(err); }
            console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
            console.log("* " + image.public_id);
            console.log("* " + image.url);
            
            let processedImage = cloudinary.image(image.public_id, {secure: true,  transformation: [
                {width: 150, crop: "scale"},
                ]}).replace("<img src='", '').replace("' />", '');
            
            
            // Add to  the database
            // DateJoined
            let rawDate = new Date();
            let dateJoined = moment(rawDate, "DD/MM/YYYY");
            
            const newUser = {
                githubId: profile.id,
                username: profile.displayName,
                
                imageFile: processedImage,
                dateJoined
            }

            try {
                User.findOne({where: {githubId: profile.id}}).then((user) =>{
                    if (user){
                        done(null, user);
                    } else{
                        User.create(newUser).then((user) => {
                                    done(null, user);
                                })
                                .catch((err) => console.log(err));
                }
            })
            } catch (err) {
            console.log(err)
            }
            // Add to  the database
                

        });
        
    }
));
    passport.serializeUser((user, done) => {
        done(null, user.id);
    });

    passport.deserializeUser((id, done) => {
        User.findById(id, (err, user) => done(err, user));
    });
}